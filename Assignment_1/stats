#!/bin/bash
#####################
# Kevin Turkington  #
# CS 344            #
# Assignment 1      #
# 10/21/17          #
#####################

#RUN TIME CONSTANTS
FILE=$2
TEMPFILE="$$.tmp"
TEMPINPUTFILE="$$_stdin.tmp"
declare -i ROW=0;
declare -i COL=0;
declare -i ROWMEDIAN;
declare -i COLMEDIAN;

trap Cleanup INT HUP TERM EXIT;

#desc: checks file for existing, permissions, etc.
checkValidFile()
{
    #check if file exists
    if [[ ! -e $FILE ]];then
        #read stdin if no file specified
        if [[ "$2" == "" ]];then
            FILE="$TEMPINPUTFILE";
            while read line;
            do
                echo "$line" >> $FILE;
            done < ${1:-/dev/stdin};
        #error if file DNE
        elif [[ "$2" != "" ]];then
            echo "$0 cannot find $FILE" >&2;
            exit 1;
        fi
    #cannot read file 
    elif [[ ! -r $FILE && ! -z $FILE ]];then
        echo "$0 cannot read $FILE" >&2;
        exit 1;
    #permission to read file denied
    elif [[ ! -r $FILE ]];then
        echo "$0 read permission denied for $FILE" >&2;
        exit 1;
    fi



}

# desc: Utility for setting run time constants
DimensionsUtil()
{
    # takes first column and counts lines for row
    ROW=$(cut -f 1 $FILE | wc -l);
    # takes first row, replaces tabs with newline and counts lines for column
    COL=$(head -n 1 $FILE | tr '\t' '\n' | wc -l);

    #computes ROWMEDIAN number
    ROWMEDIAN=$(( ($ROW + (1) )/ 2));
    if [[ $ROWMEDIAN -lt 0 ]];then
        $ROWMEDIAN=0;
    fi

    #computes COLMEDIAN number
    COLMEDIAN=$(( ($COL + (0) )/ 2));
    if [[ $COLMEDIAN -lt 0 ]];then
        $COLMEDIAN=0;
    fi

    # echo "ROW: $ROW";
    # echo "COL: $COL";
    # echo "ROWMEDIAN: $ROWMEDIAN";
    # echo "COLMEDIAN: $COLMEDIAN";
}

#desc: reads file and prints a sorted version to a tempfile.
FillFileRow()
{
    #creates tempfile.
    touch $TEMPFILE;
    while read line; 
    do
        #reads in each row sorts then places in TEMPFILE
        echo $( for i in $line; do echo -e "$i\t";done | sort -n ) | tr ' ' '\t' >> $TEMPFILE
    done < $FILE;
}

#desc: reads file and prints a sorted version to a tempfile.
FillFileCol()
{   
    #creates tempfile
    touch $TEMPFILE;
    for i in $(seq 1 $COL); 
    do
        #reads in the file, gets a column, sorts the column,
        #reformates the column into a row, places in tempfile
        echo "$(cat $FILE | cut -f $i | sort -n | tr '\n' '\t')" >> $TEMPFILE
    done;
}

#desc: cleans tempfiles.
Cleanup()
{
    #if tempfile exists delete
    if [[ -e $TEMPFILE ]];then
        rm -f "$TEMPFILE";
    fi
    #if inputfile exists delete
    if [[ -e "$TEMPINPUTFILE" ]];then
        rm -f "$TEMPINPUTFILE";
    fi
}

#Desc:Function that fills tempfiles and computes AVG/Median
#then prints out back to user with Cleanup
rows_func() 
{
    checkValidFile;
    DimensionsUtil;

    FillFileRow;

    echo -e "Average\tMedian";
    #AVG/Median logic
    while read line;
    do
        Sum=0;
        TempArr=();

        for i in $line;
        do
            Sum=$(($Sum+$i));
            TempArr+=("$i");
        done;

        #printing out AVG and Median
        echo -e "$((($Sum +($COL/2))/$COL))\t${TempArr[$ROWMEDIAN]}";

    done < $TEMPFILE;

    Cleanup;

}

# Desc:Function that fills tempfiles and computes AVG/Median
#then prints out back to user with Cleanup
cols_func()
{
    checkValidFile; 
    DimensionsUtil;

    FillFileCol;

    AVGstring="";
    MedianString="";

    #AVG/Median logic
    while read line;
    do
        Sum=0;
        TempArr=();

        for i in $line;
        do
            Sum=$(($Sum+$i));
            TempArr+=("$i");
        done;

        AVGstring+="$((($Sum +($ROW/2))/$ROW))\t"
        MedianString+="${TempArr[$COLMEDIAN]}\t";

    done < $TEMPFILE;

    #printing out lines
    echo "Averages:";
    echo -e $AVGstring;
    echo "Medians:"
    echo -e $MedianString;

    Cleanup;
}

#Main##############################################
#checks amount of inputs given in command line
if [ "$#" -gt 2 ] || [ "$#" -eq 0 ]
then
    echo "$0 {-rows|-cols} [file]" >&2
    exit 1;
fi
#checks if row tag is specified
if [[ "$1" == -r* ]]
then
    rows_func;
    exit 0;
#checks if col tag is specified
elif [[ "$1" == -c* ]] 
then
    cols_func;
    exit 0;
else
    echo "$0 {-rows|-cols} [file]" >&2
    exit 1;
fi
####################################################